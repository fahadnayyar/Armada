# -*- python -*-
import re
import sys
import os, os.path
import subprocess
import traceback
import pdb
import SCons.Util
import atexit
import platform

Import("*")

env = Environment()
if sys.platform != 'win32' and sys.platform != 'cygwin':
  env['DOTNET'] = 'dotnet'

# Retrieve tool-specific command overrides passed in by the user
# We don't really need --DAFNYPATH, but it's OK if the user
# specifies it.
AddOption('--DAFNYPATH',
  dest='dafny_path',
  type='string',
  default=None,
  action='store',
  help='Specify the path to Dafny tool binaries (not needed)')

pipeline_dll = os.path.abspath('Binaries/ArmadaPipeline.dll')
if sys.platform == "win32" or sys.platform == "cygwin":
  armada_exe = os.path.abspath('Binaries/Armada.exe')
else:
  armada_exe = os.path.abspath('Binaries/Armada.dll')

####################################################################
#
#   Define Armada transformation Builders
#
####################################################################

def generate_armada_actions(source, target, env, for_signature):
#  print("Target ", [File(t).path for t in target], " has dependencies ", [File(s).path for s in source])
  source_path = File(source[0]).path
  source_dir = os.path.dirname(source_path)
  source_name = os.path.basename(source_path)
  num_slashes = source_path.count("/")
  if num_slashes > 0:
    armada_path = "../" * (num_slashes-1) + ".."
  else:
    armada_path = "."
  return "cd %s; $DOTNET %s /armadaPath:%s %s" % (source_dir, armada_exe, armada_path, source_name)

def add_armada(env):
  armada = Builder(generator=generate_armada_actions)
  env.Append(BUILDERS = {'Armada' : armada})

####################################################################
#
#   Put it all together
#
####################################################################

add_armada(env)

####################################################################
#
#   Create dependencies
#
####################################################################

def run_directory(dir_name, entries):
  for (armada_name, dafny_files, proof_dirs) in entries:
    source = "Test/%s/%s.arm" % (dir_name, armada_name)
    targets = ["Test/%s/%s.dfy" % (dir_name, dafny_file) for dafny_file in dafny_files]
    cmd = env.Armada(targets, [source, armada_exe, pipeline_dll])
    for proof_dir in proof_dirs:
      subdir = "Test/%s/%s" % (dir_name, proof_dir)
      if os.path.isdir(subdir):
        for filename in os.listdir(subdir):
          if os.path.splitext(filename)[1] == '.dfy':
            Clean(cmd, "%s/%s" % (subdir, filename))
        Clean(cmd, subdir)


# run_directory("assume-intro", [
#     ("test", ["SharedStructs", "A", "B", "AB"], ["AB"]),
#     ("test2", ["SharedStructs2", "C", "D", "CD"], ["CD"]),
#     ("test3", ["SharedStructs3", "E", "F", "EF"], ["EF"]),
# ])

# run_directory("barrier", [
#     ("barrier", ["SharedStructs", "Impl", "L1", "L2", "ImplRefinesL1", "L1RefinesL2"], ["ImplRefinesL1", "L1RefinesL2"]),
# ])

# run_directory("tsoelim", [
#     ("test", ["SharedStructs", "A", "B", "AB"], ["AB"]),
#     ("test2", ["SharedStructs2", "C", "D", "CD"], ["CD"]),
#     ("test3", ["SharedStructs3", "E", "F", "EF"], ["EF"]),
#     ("test4", ["SharedStructs4", "G", "H", "GH"], ["GH"]),
# ])

# run_directory("reduction", [
#     ("test", ["SharedStructs", "A", "B", "AB"], ["AB"]),
#     ("test2", ["SharedStructs2", "C", "D", "CD"], ["CD"]),
# ])

run_directory("tas-spin-lock", [
    ("tas-lock", ["SharedStructs", "impl", "spec", "impl_spec"], ["impl_spec"]),
])


# run_directory("combining", [
#     ("test", ["SharedStructs", "A", "B", "AB"], ["AB"]),
# ])

# run_directory("starweakening", [
#     ("test", ["SharedStructs", "A", "B", "AB"], ["AB"]),
#     ("test2", ["SharedStructs2", "C", "D", "CD"], ["CD"]),
#     ("test3", ["SharedStructs3", "E", "F", "EF"], ["EF"]),
#     ("test4", ["SharedStructs4", "G", "H", "GH"], ["GH"]),
# ])

# run_directory("varhiding", [
#     ("test", ["SharedStructs", "A", "B", "AB"], ["AB"]),
#     ("test2", ["SharedStructs2", "C", "D", "CD"], ["CD"]),
#     ("test3", ["SharedStructs3", "E", "F", "EF"], ["EF"]),
#     ("test4", ["SharedStructs4", "G", "H", "GH"], ["GH"]),
#     ("test5", ["SharedStructs5", "I", "J", "IJ"], ["IJ"]),
# ])

# run_directory("varintro", [
#     ("test", ["SharedStructs", "A", "B", "AB"], ["AB"]),
#     ("test2", ["SharedStructs2", "C", "D", "CD"], ["CD"]),
#     ("test3", ["SharedStructs3", "E", "F", "EF"], ["EF"]),
#     ("test4", ["SharedStructs4", "G", "H", "GH"], ["GH"]),
# ])

# run_directory("weakening", [
#     ("test", ["SharedStructs", "A", "B", "AB"], ["AB"]),
#     ("test2", ["SharedStructs2", "C", "D", "CD"], ["CD"]),
#     ("test3", ["SharedStructs3", "E", "F", "EF"], ["EF"]),
# ])

# run_directory("counter", [
#     ("SharedStructs", ["SharedStructs"], []),
#     ("A", ["A"], []),
#     ("B", ["B"], []),
#     ("C", ["C"], []),
#     ("D", ["D"], []),
#     ("E", ["E"], []),
#     ("F", ["F"], []),
#     ("G", ["G"], []),
#     ("I", ["I"], []),
#     ("J", ["J"], []),
#     ("AB", ["AB"], ["AB"]),
#     ("BC", ["BC"], ["BC"]),
#     ("CD", ["CD"], ["CD"]),
#     ("DE", ["DE"], ["DE"]),
#     ("EF", ["EF"], ["EF"]),
#     ("FG", ["FG"], ["FG"]),
#     ("GI", ["GI"], ["GI"]),
#     ("IJ", ["IJ"], ["IJ"]),
# ])

# run_directory("bitvector", [
#     ("test", ["SharedStructs", "A", "B", "AB"], ["AB"]),
# ])

# run_directory("regions", [
#     ("test", ["SharedStructs", "A", "B", "AB"], ["AB"]),
#     ("test2", ["SharedStructs2", "C", "D", "CD"], ["CD"]),
#     ("test3", ["SharedStructs3", "E", "F", "EF"], ["EF"]),
#     ("test4", ["SharedStructs4", "G", "H", "GH"], ["GH"]),
#     ("pointers", ["SharedStructsPointers", "level0", "level1", "level01proof"], ["level01proof"]),
# ])

# run_directory("armada-parser", [
#     ("test", ["SharedStructs", "A"], []),
#     ("test2", ["SharedStructs2", "B"], []),
#     ("test3", ["SharedStructs3", "C"], []),
#     ("test4", ["SharedStructs4", "D"], []),
#     ("test5", ["SharedStructs5", "E"], []),
#     ("test6", ["SharedStructs6", "F"], []),
#     ("test7", ["SharedStructs7", "G"], [])
# ])

# run_directory("mcslock", [
#     ("lock-array", ["MCSLock", "pseudo_impl", "L1", "L2", "L3", "L4", "L5", "L6", "pseudo_impl_L1", "L1_L2", "L2_L3", "L3_L4", "L4_L5", "L5_L6"],
#      ["pseudo_impl_L1", "L1_L2", "L2_L3", "L3_L4", "L4_L5", "L5_L6"])
# ])

# run_directory("qbss", [
#     ("queue", [
#         "QueueBSSNoTSO",
#         "QueueBSSNoTSO_AbstractQueueIntroduced",
#         "QueueBSSNoTSO_AbstractQueueIntroduced_CombinedEnqueue",
#         "QueueBSSNoTSO_WithAbstractQueue",
#         "QueueBSSNoTSO_AbstractLogs",
#         "QueueBSSNoTSO_AbstractLogsStarweakened",
#         "QueueBSSNoTSO_HiddenEnqLocals",
#         "QueueBSSNoTSO_HiddenEnqDeqLocals",
#         "QueueBSSNoTSO_HiddenImpl",
#     ],
#     [
#         "NoTSOIntroduceAbstractQueue",
#         "CombineEnqueueAtomicAbstractQueue",
#         "CombineDequeueAtomicAbstractQueue",
#         "NoTSOUseAbstractQueueForLog",
#         "NoTSOStarWeaken",
#         "HideEnqueueLocals",
#         "HideDequeueLocals",
#         "HideGlobal",
#     ])
# ])
