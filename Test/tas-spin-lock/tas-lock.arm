include "../../Armada/ArmadaCommonDefinitions.dfy"

level pseudo_impl {


  ghost var log:seq<MyLogEntry> := [];


  noaddr var impl: uint64 := 1;


  method acquire() {
    noaddr var old: uint64 := 0;
    while (old == 0) {
      old := compare_and_swap(impl, 1, 0);
    }
  }


  method release() {
    noaddr var old: uint64 := 0; 
    old := compare_and_swap(tail, 0, 1);
    // todo: put assertion/specification that old==0
  }


  method client() {
    while true {
      acquire();
      label first:
        log ::= log + [Left($me)];
      label second:
        log ::= log + [Right($me)];
      label third:
      release();
    }
  }

  
  method main() {
    while true
    {
      create_thread client();
    }
  }


}


level spec {


  ghost var log:seq<MyLogEntry> := [];


  noaddr var impl: uint64 := 1;


  method acquire() {
    ensures $sb_empty
    noaddr var old: uint64 := 0;
    while (old == 0) {
      atomic {
        old := compare_and_swap(impl, 1, 0);
      }
    }
  }


  method release() {
    ensures $sb_empty
    noaddr var old: uint64 := 0; 
    atomic {
      old := compare_and_swap(tail, 0, 1);
    }
    // todo: put assertion/specification that old==0
  }


  method client() 
  {
    while true 
    {
      acquire();
      placeholder := 0;
      atomic {
        label first:
          log ::= log + [Left($me)];
        label second:
          log ::= log + [Right($me)];
      }
      label third:
      release();
    }
  }

  
  method main() {
    while true
    {
      create_thread client();
    }
  }


}



proof impl_spec {
       
}
